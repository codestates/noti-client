{"ast":null,"code":"var _jsxFileName = \"/Users/seunghunhan/Desktop/project/noti-client/src/LandingPage/Tooltip.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport styled, { css } from 'styled-components';\nimport { useLayer, useHover, Arrow } from \"react-laag\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Tooltip({\n  children,\n  text\n}) {\n  _s();\n\n  const [isOver, hoverProps] = useHover({\n    delayEnter: 100,\n    delayLeave: 300\n  });\n  const {\n    triggerProps,\n    layerProps,\n    arrowProps,\n    renderLayer\n  } = useLayer({\n    isOpen: isOver,\n    placement: \"top-center\",\n    triggerOffset: 8 // small gap between wrapped content and the tooltip\n\n  });\n  let trigger;\n\n  if (isReactText(children)) {\n    trigger = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-text-wrapper\",\n      ...triggerProps,\n      ...hoverProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  } else {\n    trigger = /*#__PURE__*/React.cloneElement(children, { ...triggerProps,\n      ...hoverProps\n    });\n  }\n\n  const AnimatePresence = styled.div`\n  color: #000000;\n  font-size: 36px;\n\n  `;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [trigger, renderLayer( /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: isOver && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"tooltip-box\",\n        initial: {\n          opacity: 0,\n          scale: 0.9\n        },\n        animate: {\n          opacity: 1,\n          scale: 1\n        },\n        exit: {\n          opacity: 0,\n          scale: 0.9\n        },\n        transition: {\n          duration: 0.1\n        },\n        ...layerProps,\n        children: [text, /*#__PURE__*/_jsxDEV(Arrow, { ...arrowProps,\n          // backgroundColor={BG_COLOR}\n          // borderColor={BORDER_COLOR}\n          borderWidth: 1,\n          size: 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Tooltip, \"/W6BHAsvXIQRYMiFDDTfJrlh+Kg=\", false, function () {\n  return [useHover, useLayer];\n});\n\n_c = Tooltip;\n\nfunction isReactText(children) {\n  return [\"string\", \"number\"].includes(typeof children);\n}\n\nexport default Tooltip;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"sources":["/Users/seunghunhan/Desktop/project/noti-client/src/LandingPage/Tooltip.js"],"names":["React","styled","css","useLayer","useHover","Arrow","motion","AnimatePresence","Tooltip","children","text","isOver","hoverProps","delayEnter","delayLeave","triggerProps","layerProps","arrowProps","renderLayer","isOpen","placement","triggerOffset","trigger","isReactText","cloneElement","div","opacity","scale","duration","includes"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,KAA7B,QAA0C,YAA1C;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,eAAxC;;;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAjB,EAAqC;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC;AAAES,IAAAA,UAAU,EAAE,GAAd;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAAD,CAArC;AAEA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,UAA5B;AAAwCC,IAAAA;AAAxC,MAAwDf,QAAQ,CAAC;AACrEgB,IAAAA,MAAM,EAAER,MAD6D;AAErES,IAAAA,SAAS,EAAE,YAF0D;AAGrEC,IAAAA,aAAa,EAAE,CAHsD,CAGpD;;AAHoD,GAAD,CAAtE;AAMA,MAAIC,OAAJ;;AACA,MAAIC,WAAW,CAACd,QAAD,CAAf,EAA2B;AACzBa,IAAAA,OAAO,gBACL;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAA,SAA2CP,YAA3C;AAAA,SAA6DH,UAA7D;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND,MAMO;AACLa,IAAAA,OAAO,gBAAGtB,KAAK,CAACwB,YAAN,CAAmBf,QAAnB,EAA6B,EACrC,GAAGM,YADkC;AAErC,SAAGH;AAFkC,KAA7B,CAAV;AAID;;AAED,QAAML,eAAe,GAAGN,MAAM,CAACwB,GAAI;AACrC;AACA;AACA;AACA,GAJE;AAMA,sBACE;AAAA,eACGH,OADH,EAEGJ,WAAW,eACV,QAAC,eAAD;AAAA,gBACGP,MAAM,iBACL,QAAC,MAAD,CAAQ,GAAR;AACE,QAAA,SAAS,EAAC,aADZ;AAEE,QAAA,OAAO,EAAE;AAAEe,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAFX;AAGE,QAAA,OAAO,EAAE;AAAED,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAHX;AAIE,QAAA,IAAI,EAAE;AAAED,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAJR;AAKE,QAAA,UAAU,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SALd;AAAA,WAMMZ,UANN;AAAA,mBAQGN,IARH,eASE,QAAC,KAAD,OACMO,UADN;AAEE;AACA;AACA,UAAA,WAAW,EAAE,CAJf;AAKE,UAAA,IAAI,EAAE;AALR;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADU,CAFd;AAAA,kBADF;AA4BD;;GAzDQT,O;UACsBJ,Q,EAEiCD,Q;;;KAHvDK,O;;AA2DT,SAASe,WAAT,CAAqBd,QAArB,EAA+B;AAC7B,SAAO,CAAC,QAAD,EAAW,QAAX,EAAqBoB,QAArB,CAA8B,OAAOpB,QAArC,CAAP;AACD;;AACD,eAAeD,OAAf","sourcesContent":["import * as React from \"react\";\nimport styled, { css } from 'styled-components';\nimport { useLayer, useHover, Arrow } from \"react-laag\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nfunction Tooltip({ children, text }) {\n  const [isOver, hoverProps] = useHover({ delayEnter: 100, delayLeave: 300 });\n\n  const { triggerProps, layerProps, arrowProps, renderLayer } = useLayer({\n    isOpen: isOver,\n    placement: \"top-center\",\n    triggerOffset: 8 // small gap between wrapped content and the tooltip\n  });\n\n  let trigger;\n  if (isReactText(children)) {\n    trigger = (\n      <span className=\"tooltip-text-wrapper\" {...triggerProps} {...hoverProps}>\n        {children}\n      </span>\n    );\n  } else {\n    trigger = React.cloneElement(children, {\n      ...triggerProps,\n      ...hoverProps\n    });\n  }\n\n  const AnimatePresence = styled.div`\n  color: #000000;\n  font-size: 36px;\n\n  `;\n\n  return (\n    <>\n      {trigger}\n      {renderLayer(\n        <AnimatePresence>\n          {isOver && (\n            <motion.div\n              className=\"tooltip-box\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.9 }}\n              transition={{ duration: 0.1 }}\n              {...layerProps}\n            >\n              {text}\n              <Arrow\n                {...arrowProps}\n                // backgroundColor={BG_COLOR}\n                // borderColor={BORDER_COLOR}\n                borderWidth={1}\n                size={6}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      )}\n    </>\n  );\n}\n\nfunction isReactText(children) {\n  return [\"string\", \"number\"].includes(typeof children);\n}\nexport default Tooltip;"]},"metadata":{},"sourceType":"module"}