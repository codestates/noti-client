{"ast":null,"code":"// const product = {\n//     id:'productObjectId',\n//     productName:'nike 조던',\n//     brand:'nike',\n//     price:'300000',\n//     tag:[\"nike\",'조던','신발'],\n//     releaseDate:2021/04/07,\n//     comment:[\n//         {id:'commentObjectId',\n//         nickName:'jemins',\n//         goodUsers:['mins','parks'],\n//         goodCount:5,\n//         content:\"이거 진짜 사고싶어요\"}\n//     ]\n// }\n// import React, { useReducer, createContext, useContext, useRef } from 'react';\n// const initialList = [\n//   {\n//     id: 1,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '04월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 2,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '05월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '06월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '07월 28일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   }\n// ];\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     // case 'CREATE':\n//     //   return state.concat(action.alarm);\n//     case 'CHANGE':\n//       return state.map(alarm =>\n//         alarm.id === action.id ? { ...alarm, done: !alarm.done } : alarm\n//       );\n//     case 'REMOVE':\n//       return state.filter(alarm => alarm.id !== action.id);\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n// const AlarmStateContext = createContext();\n// const AlarmDispatchContext = createContext();\n// const AlarmNextIdContext = createContext();\n// export function AlarmProvider({ children }) {\n//   const [state, dispatch] = useReducer(alarmReducer, initialList);\n//   const nextId = useRef(5);\n//   return (\n//     <AlarmStateContext.Provider value={state}>\n//       <AlarmDispatchContext.Provider value={dispatch}>\n//         <AlarmNextIdContext.Provider value={nextId}>\n//           {children}\n//         </AlarmNextIdContext.Provider>\n//       </AlarmDispatchContext.Provider>\n//     </AlarmStateContext.Provider>\n//   );\n// }\n// export function useAlarmState() {\n//   const context = useContext(AlarmStateContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n// export function useAlarmDispatch() {\n//   const context = useContext(AlarmDispatchContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n// export function useAlarmNextId() {\n//   const context = useContext(AlarmNextIdContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n// import React, { createContext, useReducer, useContext } from 'react';\n// import axios from 'axios';\n// export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get(\n//       'https://jsonplaceholder.typicode.com/users'\n//     );\n//     dispatch({ type: 'GET_USERS_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USERS_ERROR', error: e });\n//   }\n// }\n// export async function getUser(dispatch, id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await axios.get(\n//       `https://jsonplaceholder.typicode.com/users/${id}`\n//     );\n//     dispatch({ type: 'GET_USER_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USER_ERROR', error: e });\n//   }\n// }\n// const initialState = {\n//   users: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   },\n//   user: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   }\n// };\n// // 로딩중일 때 바뀔 상태 객체\n// const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };\n// // 성공했을 때의 상태 만들어주는 함수\n// const success = data => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n// // 실패했을 때의 상태 만들어주는 함수\n// const error = error => ({\n//   loading: false,\n//   data: null,\n//   error: error\n// });\n// // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     case 'GET_PRODUCTS':\n//       return {\n//         ...state,\n//         users: loadingState\n//       };\n//     case 'GET_PRODUCTS_SUCCESS':\n//       return {\n//         ...state,\n//         users: success(action.data)\n//       };\n//     case 'GET_PRODUCTS_ERROR':\n//       return {\n//         ...state,\n//         users: error(action.error)\n//       };\n//     case 'GET_PRODUCTS':\n//       return {\n//         ...state,\n//         user: loadingState\n//       };\n//     case 'GET_USER_SUCCESS':\n//       return {\n//         ...state,\n//         user: success(action.data)\n//       };\n//     case 'GET_USER_ERROR':\n//       return {\n//         ...state,\n//         user: error(action.error)\n//       };\n//     default:\n//       throw new Error(`Unhanded action type: ${action.type}`);\n//   }\n// }\n// // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n// const UsersStateContext = createContext(null);\n// const UsersDispatchContext = createContext(null);\n// // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n// export function UsersProvider({ children }) {\n//   const [state, dispatch] = useReducer(usersReducer, initialState);\n//   return (\n//     <UsersStateContext.Provider value={state}>\n//       <UsersDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </UsersDispatchContext.Provider>\n//     </UsersStateContext.Provider>\n//   );\n// }\n// // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n// export function useUsersState() {\n//   const state = useContext(UsersStateContext);\n//   if (!state) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return state;\n// }\n// // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n// export function useUsersDispatch() {\n//   const dispatch = useContext(UsersDispatchContext);\n//   if (!dispatch) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return dispatch;\n// }","map":{"version":3,"sources":["/Users/seunghunhan/Desktop/project/noti-client/src/AlarmContext.js"],"names":[],"mappings":"AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const product = {\n  //     id:'productObjectId',\n  //     productName:'nike 조던',\n  //     brand:'nike',\n  //     price:'300000',\n  //     tag:[\"nike\",'조던','신발'],\n  //     releaseDate:2021/04/07,\n  //     comment:[\n  //         {id:'commentObjectId',\n  //         nickName:'jemins',\n  //         goodUsers:['mins','parks'],\n  //         goodCount:5,\n  //         content:\"이거 진짜 사고싶어요\"}\n  //     ]\n  \n  // }\n\n\n// import React, { useReducer, createContext, useContext, useRef } from 'react';\n\n// const initialList = [\n//   {\n//     id: 1,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '04월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 2,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '05월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '06월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '07월 28일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   }\n// ];\n\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     // case 'CREATE':\n//     //   return state.concat(action.alarm);\n//     case 'CHANGE':\n//       return state.map(alarm =>\n//         alarm.id === action.id ? { ...alarm, done: !alarm.done } : alarm\n//       );\n//     case 'REMOVE':\n//       return state.filter(alarm => alarm.id !== action.id);\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n\n// const AlarmStateContext = createContext();\n// const AlarmDispatchContext = createContext();\n// const AlarmNextIdContext = createContext();\n\n// export function AlarmProvider({ children }) {\n//   const [state, dispatch] = useReducer(alarmReducer, initialList);\n//   const nextId = useRef(5);\n\n//   return (\n//     <AlarmStateContext.Provider value={state}>\n//       <AlarmDispatchContext.Provider value={dispatch}>\n//         <AlarmNextIdContext.Provider value={nextId}>\n//           {children}\n//         </AlarmNextIdContext.Provider>\n//       </AlarmDispatchContext.Provider>\n//     </AlarmStateContext.Provider>\n//   );\n// }\n\n// export function useAlarmState() {\n//   const context = useContext(AlarmStateContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\n// export function useAlarmDispatch() {\n//   const context = useContext(AlarmDispatchContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\n// export function useAlarmNextId() {\n//   const context = useContext(AlarmNextIdContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\n\n\n\n\n// import React, { createContext, useReducer, useContext } from 'react';\n// import axios from 'axios';\n\n// export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get(\n//       'https://jsonplaceholder.typicode.com/users'\n//     );\n//     dispatch({ type: 'GET_USERS_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USERS_ERROR', error: e });\n//   }\n// }\n\n// export async function getUser(dispatch, id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await axios.get(\n//       `https://jsonplaceholder.typicode.com/users/${id}`\n//     );\n//     dispatch({ type: 'GET_USER_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USER_ERROR', error: e });\n//   }\n// }\n\n// const initialState = {\n//   users: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   },\n//   user: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   }\n// };\n\n// // 로딩중일 때 바뀔 상태 객체\n// const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };\n\n// // 성공했을 때의 상태 만들어주는 함수\n// const success = data => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n\n// // 실패했을 때의 상태 만들어주는 함수\n// const error = error => ({\n//   loading: false,\n//   data: null,\n//   error: error\n// });\n\n// // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     case 'GET_PRODUCTS':\n//       return {\n//         ...state,\n//         users: loadingState\n//       };\n//     case 'GET_PRODUCTS_SUCCESS':\n//       return {\n//         ...state,\n//         users: success(action.data)\n//       };\n//     case 'GET_PRODUCTS_ERROR':\n//       return {\n//         ...state,\n//         users: error(action.error)\n//       };\n//     case 'GET_PRODUCTS':\n//       return {\n//         ...state,\n//         user: loadingState\n//       };\n//     case 'GET_USER_SUCCESS':\n//       return {\n//         ...state,\n//         user: success(action.data)\n//       };\n//     case 'GET_USER_ERROR':\n//       return {\n//         ...state,\n//         user: error(action.error)\n//       };\n//     default:\n//       throw new Error(`Unhanded action type: ${action.type}`);\n//   }\n// }\n\n// // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n// const UsersStateContext = createContext(null);\n// const UsersDispatchContext = createContext(null);\n\n// // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n// export function UsersProvider({ children }) {\n//   const [state, dispatch] = useReducer(usersReducer, initialState);\n//   return (\n//     <UsersStateContext.Provider value={state}>\n//       <UsersDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </UsersDispatchContext.Provider>\n//     </UsersStateContext.Provider>\n//   );\n// }\n\n// // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n// export function useUsersState() {\n//   const state = useContext(UsersStateContext);\n//   if (!state) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return state;\n// }\n\n// // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n// export function useUsersDispatch() {\n//   const dispatch = useContext(UsersDispatchContext);\n//   if (!dispatch) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return dispatch;\n// }"]},"metadata":{},"sourceType":"module"}