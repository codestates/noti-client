{"ast":null,"code":"var _jsxFileName = \"/Users/seunghunhan/Desktop/project/noti-client/src/AlarmContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useReducer, createContext, useContext, useRef } from 'react';\n// const initialList = [\n//   {\n//     id: 1,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '04월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 2,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '05월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '06월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '07월 28일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   }\n// ];\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     // case 'CREATE':\n//     //   return state.concat(action.alarm);\n//     case 'CHANGE':\n//       return state.map(alarm =>\n//         alarm.id === action.id ? { ...alarm, done: !alarm.done } : alarm\n//       );\n//     case 'REMOVE':\n//       return state.filter(alarm => alarm.id !== action.id);\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n// const AlarmStateContext = createContext();\n// const AlarmDispatchContext = createContext();\n// const AlarmNextIdContext = createContext();\n// export function AlarmProvider({ children }) {\n//   const [state, dispatch] = useReducer(alarmReducer, initialList);\n//   const nextId = useRef(5);\n//   return (\n//     <AlarmStateContext.Provider value={state}>\n//       <AlarmDispatchContext.Provider value={dispatch}>\n//         <AlarmNextIdContext.Provider value={nextId}>\n//           {children}\n//         </AlarmNextIdContext.Provider>\n//       </AlarmDispatchContext.Provider>\n//     </AlarmStateContext.Provider>\n//   );\n// }\n// export function useAlarmState() {\n//   const context = useContext(AlarmStateContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n// export function useAlarmDispatch() {\n//   const context = useContext(AlarmDispatchContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n// export function useAlarmNextId() {\n//   const context = useContext(AlarmNextIdContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\nconst initialState = {\n  users: {\n    loading: false,\n    data: null,\n    error: null\n  },\n  user: {\n    loading: false,\n    data: null,\n    error: null\n  }\n}; // 로딩중일 때 바뀔 상태 객체\n\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n}; // 성공했을 때의 상태 만들어주는 함수\n\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n}); // 실패했을 때의 상태 만들어주는 함수\n\n\nconst error = error => ({\n  loading: false,\n  data: null,\n  error: error\n}); // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n\n\nfunction usersReducer(state, action) {\n  switch (action.type) {\n    case 'GET_USERS':\n      return { ...state,\n        users: loadingState\n      };\n\n    case 'GET_USERS_SUCCESS':\n      return { ...state,\n        users: success(action.data)\n      };\n\n    case 'GET_USERS_ERROR':\n      return { ...state,\n        users: error(action.error)\n      };\n\n    case 'GET_USER':\n      return { ...state,\n        user: loadingState\n      };\n\n    case 'GET_USER_SUCCESS':\n      return { ...state,\n        user: success(action.data)\n      };\n\n    case 'GET_USER_ERROR':\n      return { ...state,\n        user: error(action.error)\n      };\n\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n} // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n\n\nconst UsersStateContext = createContext(null);\nconst UsersDispatchContext = createContext(null); // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n\nexport function UsersProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(usersReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(UsersStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(UsersDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n} // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n\n_s(UsersProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = UsersProvider;\nexport function useUsersState() {\n  _s2();\n\n  const state = useContext(UsersStateContext);\n\n  if (!state) {\n    throw new Error('Cannot find UsersProvider');\n  }\n\n  return state;\n} // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n\n_s2(useUsersState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useUsersDispatch() {\n  _s3();\n\n  const dispatch = useContext(UsersDispatchContext);\n\n  if (!dispatch) {\n    throw new Error('Cannot find UsersProvider');\n  }\n\n  return dispatch;\n}\n\n_s3(useUsersDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersProvider\");","map":{"version":3,"sources":["/Users/seunghunhan/Desktop/project/noti-client/src/AlarmContext.js"],"names":["initialState","users","loading","data","error","user","loadingState","success","usersReducer","state","action","type","Error","UsersStateContext","createContext","UsersDispatchContext","UsersProvider","children","dispatch","useReducer","useUsersState","useContext","useUsersDispatch"],"mappings":"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","sourcesContent":["// import React, { useReducer, createContext, useContext, useRef } from 'react';\n\n// const initialList = [\n//   {\n//     id: 1,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '04월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 2,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '05월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '06월 30일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     img: \"../../IMG/조던1.jpeg\",\n//     date: '07월 28일 발매',\n//     productname: \"조던1\",\n//     done: false\n//   }\n// ];\n\n// function alarmReducer(state, action) {\n//   switch (action.type) {\n//     // case 'CREATE':\n//     //   return state.concat(action.alarm);\n//     case 'CHANGE':\n//       return state.map(alarm =>\n//         alarm.id === action.id ? { ...alarm, done: !alarm.done } : alarm\n//       );\n//     case 'REMOVE':\n//       return state.filter(alarm => alarm.id !== action.id);\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n\n// const AlarmStateContext = createContext();\n// const AlarmDispatchContext = createContext();\n// const AlarmNextIdContext = createContext();\n\n// export function AlarmProvider({ children }) {\n//   const [state, dispatch] = useReducer(alarmReducer, initialList);\n//   const nextId = useRef(5);\n\n//   return (\n//     <AlarmStateContext.Provider value={state}>\n//       <AlarmDispatchContext.Provider value={dispatch}>\n//         <AlarmNextIdContext.Provider value={nextId}>\n//           {children}\n//         </AlarmNextIdContext.Provider>\n//       </AlarmDispatchContext.Provider>\n//     </AlarmStateContext.Provider>\n//   );\n// }\n\n// export function useAlarmState() {\n//   const context = useContext(AlarmStateContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\n// export function useAlarmDispatch() {\n//   const context = useContext(AlarmDispatchContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\n// export function useAlarmNextId() {\n//   const context = useContext(AlarmNextIdContext);\n//   if (!context) {\n//     throw new Error('Cannot find AlarmProvider');\n//   }\n//   return context;\n// }\n\nconst initialState = {\n  users: {\n    loading: false,\n    data: null,\n    error: null\n  },\n  user: {\n    loading: false,\n    data: null,\n    error: null\n  }\n};\n\n// 로딩중일 때 바뀔 상태 객체\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n};\n\n// 성공했을 때의 상태 만들어주는 함수\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n});\n\n// 실패했을 때의 상태 만들어주는 함수\nconst error = error => ({\n  loading: false,\n  data: null,\n  error: error\n});\n\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\nfunction usersReducer(state, action) {\n  switch (action.type) {\n    case 'GET_USERS':\n      return {\n        ...state,\n        users: loadingState\n      };\n    case 'GET_USERS_SUCCESS':\n      return {\n        ...state,\n        users: success(action.data)\n      };\n    case 'GET_USERS_ERROR':\n      return {\n        ...state,\n        users: error(action.error)\n      };\n    case 'GET_USER':\n      return {\n        ...state,\n        user: loadingState\n      };\n    case 'GET_USER_SUCCESS':\n      return {\n        ...state,\n        user: success(action.data)\n      };\n    case 'GET_USER_ERROR':\n      return {\n        ...state,\n        user: error(action.error)\n      };\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n}\n\n// State 용 Context 와 Dispatch 용 Context 따로 만들어주기\nconst UsersStateContext = createContext(null);\nconst UsersDispatchContext = createContext(null);\n\n// 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\nexport function UsersProvider({ children }) {\n  const [state, dispatch] = useReducer(usersReducer, initialState);\n  return (\n    <UsersStateContext.Provider value={state}>\n      <UsersDispatchContext.Provider value={dispatch}>\n        {children}\n      </UsersDispatchContext.Provider>\n    </UsersStateContext.Provider>\n  );\n}\n\n// State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\nexport function useUsersState() {\n  const state = useContext(UsersStateContext);\n  if (!state) {\n    throw new Error('Cannot find UsersProvider');\n  }\n  return state;\n}\n\n// Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\nexport function useUsersDispatch() {\n  const dispatch = useContext(UsersDispatchContext);\n  if (!dispatch) {\n    throw new Error('Cannot find UsersProvider');\n  }\n  return dispatch;\n}"]},"metadata":{},"sourceType":"module"}