{"ast":null,"code":"var _jsxFileName = \"/Users/seunghunhan/Desktop/project/noti-client/src/AlarmContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useReducer, createContext, useContext, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialList = [{\n  id: 1,\n  img: \"../../IMG/조던1.jpeg\",\n  date: '04월 30일 발매',\n  productname: \"조던1\",\n  done: false\n}, {\n  id: 2,\n  img: \"../../IMG/조던1.jpeg\",\n  date: '05월 30일 발매',\n  productname: \"조던1\",\n  done: false\n}, {\n  id: 3,\n  img: \"../../IMG/조던1.jpeg\",\n  date: '06월 30일 발매',\n  productname: \"조던1\",\n  done: false\n}, {\n  id: 4,\n  img: \"../../IMG/조던1.jpeg\",\n  date: '07월 28일 발매',\n  productname: \"조던1\",\n  done: false\n}];\n\nfunction alarmReducer(state, action) {\n  switch (action.type) {\n    // case 'CREATE':\n    //   return state.concat(action.alarm);\n    case 'CHANGE':\n      return state.map(alarm => alarm.id === action.id ? { ...alarm,\n        done: !alarm.done\n      } : alarm);\n\n    case 'REMOVE':\n      return state.filter(alarm => alarm.id !== action.id);\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst AlarmStateContext = /*#__PURE__*/createContext();\nconst AlarmDispatchContext = /*#__PURE__*/createContext();\nconst AlarmNextIdContext = /*#__PURE__*/createContext();\nexport function AlarmProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(alarmReducer, initialList);\n  const nextId = useRef(5);\n  return /*#__PURE__*/_jsxDEV(AlarmStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(AlarmDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(AlarmNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AlarmProvider, \"0LvN0DonuOhCM325ED0FzNO/mgU=\");\n\n_c = AlarmProvider;\nexport function useAlarmState() {\n  _s2();\n\n  const context = useContext(AlarmStateContext);\n\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n\n  return context;\n}\n\n_s2(useAlarmState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useAlarmDispatch() {\n  _s3();\n\n  const context = useContext(AlarmDispatchContext);\n\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n\n  return context;\n}\n\n_s3(useAlarmDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useAlarmNextId() {\n  _s4();\n\n  const context = useContext(AlarmNextIdContext);\n\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n\n  return context;\n} // import React, { createContext, useReducer, useContext } from 'react';\n// import axios from 'axios';\n// export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get(\n//       'https://jsonplaceholder.typicode.com/users'\n//     );\n//     dispatch({ type: 'GET_USERS_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USERS_ERROR', error: e });\n//   }\n// }\n// export async function getUser(dispatch, id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await axios.get(\n//       `https://jsonplaceholder.typicode.com/users/${id}`\n//     );\n//     dispatch({ type: 'GET_USER_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USER_ERROR', error: e });\n//   }\n// }\n// const initialState = {\n//   users: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   },\n//   user: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   }\n// };\n// // 로딩중일 때 바뀔 상태 객체\n// const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };\n// // 성공했을 때의 상태 만들어주는 함수\n// const success = data => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n// // 실패했을 때의 상태 만들어주는 함수\n// const error = error => ({\n//   loading: false,\n//   data: null,\n//   error: error\n// });\n// // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n// function usersReducer(state, action) {\n//   switch (action.type) {\n//     case 'GET_USERS':\n//       return {\n//         ...state,\n//         users: loadingState\n//       };\n//     case 'GET_USERS_SUCCESS':\n//       return {\n//         ...state,\n//         users: success(action.data)\n//       };\n//     case 'GET_USERS_ERROR':\n//       return {\n//         ...state,\n//         users: error(action.error)\n//       };\n//     case 'GET_USER':\n//       return {\n//         ...state,\n//         user: loadingState\n//       };\n//     case 'GET_USER_SUCCESS':\n//       return {\n//         ...state,\n//         user: success(action.data)\n//       };\n//     case 'GET_USER_ERROR':\n//       return {\n//         ...state,\n//         user: error(action.error)\n//       };\n//     default:\n//       throw new Error(`Unhanded action type: ${action.type}`);\n//   }\n// }\n// // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n// const UsersStateContext = createContext(null);\n// const UsersDispatchContext = createContext(null);\n// // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n// export function UsersProvider({ children }) {\n//   const [state, dispatch] = useReducer(usersReducer, initialState);\n//   return (\n//     <UsersStateContext.Provider value={state}>\n//       <UsersDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </UsersDispatchContext.Provider>\n//     </UsersStateContext.Provider>\n//   );\n// }\n// // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n// export function useUsersState() {\n//   const state = useContext(UsersStateContext);\n//   if (!state) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return state;\n// }\n// // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n// export function useUsersDispatch() {\n//   const dispatch = useContext(UsersDispatchContext);\n//   if (!dispatch) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return dispatch;\n// }\n\n_s4(useAlarmNextId, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AlarmProvider\");","map":{"version":3,"sources":["/Users/seunghunhan/Desktop/project/noti-client/src/AlarmContext.js"],"names":["React","useReducer","createContext","useContext","useRef","initialList","id","img","date","productname","done","alarmReducer","state","action","type","map","alarm","filter","Error","AlarmStateContext","AlarmDispatchContext","AlarmNextIdContext","AlarmProvider","children","dispatch","nextId","useAlarmState","context","useAlarmDispatch","useAlarmNextId"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialList = [\n  {\n    id: 1,\n    img: \"../../IMG/조던1.jpeg\",\n    date: '04월 30일 발매',\n    productname: \"조던1\",\n    done: false\n  },\n  {\n    id: 2,\n    img: \"../../IMG/조던1.jpeg\",\n    date: '05월 30일 발매',\n    productname: \"조던1\",\n    done: false\n  },\n  {\n    id: 3,\n    img: \"../../IMG/조던1.jpeg\",\n    date: '06월 30일 발매',\n    productname: \"조던1\",\n    done: false\n  },\n  {\n    id: 4,\n    img: \"../../IMG/조던1.jpeg\",\n    date: '07월 28일 발매',\n    productname: \"조던1\",\n    done: false\n  }\n];\n\nfunction alarmReducer(state, action) {\n  switch (action.type) {\n    // case 'CREATE':\n    //   return state.concat(action.alarm);\n    case 'CHANGE':\n      return state.map(alarm =>\n        alarm.id === action.id ? { ...alarm, done: !alarm.done } : alarm\n      );\n    case 'REMOVE':\n      return state.filter(alarm => alarm.id !== action.id);\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst AlarmStateContext = createContext();\nconst AlarmDispatchContext = createContext();\nconst AlarmNextIdContext = createContext();\n\nexport function AlarmProvider({ children }) {\n  const [state, dispatch] = useReducer(alarmReducer, initialList);\n  const nextId = useRef(5);\n\n  return (\n    <AlarmStateContext.Provider value={state}>\n      <AlarmDispatchContext.Provider value={dispatch}>\n        <AlarmNextIdContext.Provider value={nextId}>\n          {children}\n        </AlarmNextIdContext.Provider>\n      </AlarmDispatchContext.Provider>\n    </AlarmStateContext.Provider>\n  );\n}\n\nexport function useAlarmState() {\n  const context = useContext(AlarmStateContext);\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n  return context;\n}\n\nexport function useAlarmDispatch() {\n  const context = useContext(AlarmDispatchContext);\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n  return context;\n}\n\nexport function useAlarmNextId() {\n  const context = useContext(AlarmNextIdContext);\n  if (!context) {\n    throw new Error('Cannot find AlarmProvider');\n  }\n  return context;\n}\n\n// import React, { createContext, useReducer, useContext } from 'react';\n// import axios from 'axios';\n\n// export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get(\n//       'https://jsonplaceholder.typicode.com/users'\n//     );\n//     dispatch({ type: 'GET_USERS_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USERS_ERROR', error: e });\n//   }\n// }\n\n// export async function getUser(dispatch, id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await axios.get(\n//       `https://jsonplaceholder.typicode.com/users/${id}`\n//     );\n//     dispatch({ type: 'GET_USER_SUCCESS', data: response.data });\n//   } catch (e) {\n//     dispatch({ type: 'GET_USER_ERROR', error: e });\n//   }\n// }\n\n// const initialState = {\n//   users: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   },\n//   user: {\n//     loading: false,\n//     data: null,\n//     error: null\n//   }\n// };\n\n// // 로딩중일 때 바뀔 상태 객체\n// const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };\n\n// // 성공했을 때의 상태 만들어주는 함수\n// const success = data => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n\n// // 실패했을 때의 상태 만들어주는 함수\n// const error = error => ({\n//   loading: false,\n//   data: null,\n//   error: error\n// });\n\n// // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n// function usersReducer(state, action) {\n//   switch (action.type) {\n//     case 'GET_USERS':\n//       return {\n//         ...state,\n//         users: loadingState\n//       };\n//     case 'GET_USERS_SUCCESS':\n//       return {\n//         ...state,\n//         users: success(action.data)\n//       };\n//     case 'GET_USERS_ERROR':\n//       return {\n//         ...state,\n//         users: error(action.error)\n//       };\n//     case 'GET_USER':\n//       return {\n//         ...state,\n//         user: loadingState\n//       };\n//     case 'GET_USER_SUCCESS':\n//       return {\n//         ...state,\n//         user: success(action.data)\n//       };\n//     case 'GET_USER_ERROR':\n//       return {\n//         ...state,\n//         user: error(action.error)\n//       };\n//     default:\n//       throw new Error(`Unhanded action type: ${action.type}`);\n//   }\n// }\n\n// // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n// const UsersStateContext = createContext(null);\n// const UsersDispatchContext = createContext(null);\n\n// // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n// export function UsersProvider({ children }) {\n//   const [state, dispatch] = useReducer(usersReducer, initialState);\n//   return (\n//     <UsersStateContext.Provider value={state}>\n//       <UsersDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </UsersDispatchContext.Provider>\n//     </UsersStateContext.Provider>\n//   );\n// }\n\n// // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n// export function useUsersState() {\n//   const state = useContext(UsersStateContext);\n//   if (!state) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return state;\n// }\n\n// // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n// export function useUsersDispatch() {\n//   const dispatch = useContext(UsersDispatchContext);\n//   if (!dispatch) {\n//     throw new Error('Cannot find UsersProvider');\n//   }\n//   return dispatch;\n// }"]},"metadata":{},"sourceType":"module"}